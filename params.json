{"name":"Accel","tagline":"Accel is a simple library written in C that uses accelerometer data to find gestures in realtime.","body":"# accel [![Build Status](https://travis-ci.org/shalecraig/accel.png?branch=master)](https://travis-ci.org/shalecraig/accel)\r\n---\r\n\r\n#### What is accel?\r\nAccel is a simple library written in C that uses accelerometer data to find gestures in realtime. \r\nThough it is written with the Pebble in mind, it should work with other embedded devices as well.\r\n\r\n## API Overview\r\n\r\n### Return types\r\n\r\nAll methods in the accel API return a success value or error codes.\r\n\r\nReturn values are as follows:\r\n\r\n- `ACCEL_SUCCESS` - the method being called is successful.\r\n- `ACCEL_PARAM_ERROR` - parameters being passed are invalid.\r\n- `ACCEL_MALLOC_ERROR` - returned when malloc fails\r\n- `ACCEL_NO_VALID_GESTURE` - when gestures are queried, this value is returned when there are no applicable gestures.\r\n- `ACCEL_INTERNAL_ERROR` - there is an internal error in the accel library, usually due to consistency issues in parameter attributes. It's best to report these.\r\n\r\n### Methods\r\n\r\n- `int accel_generate_state(accel_state **state, int dimensions, int window_size)`\r\n    - Generates and sets up a valid `accel_state` object that tracks input of `dimensions` dimensions, using a rolling window of size `window_size` to smooth measurements.\r\n- `int accel_destroy_state(accel_state **state)`\r\n    - Destroys any `accel_state` objects passed in, and resets `state` to point to the `NULL` value.\r\n- `int accel_start_record_gesture(accel_state *state, int *gesture)`\r\n    - Starts to record a gesture, saving the gesture id to `gesture`.\r\n- `int accel_end_record_gesture(accel_state *state, int gesture_id)`\r\n    - Completes recording the gesture at gesture id `gesture_id`.\r\n- `int accel_process_timer_tick(accel_state *state, int *accel_data)`\r\n    - Called whenever a tick happens, this allows `accel` to update projected most-likely gestures.\r\n- `int accel_find_most_likely_gesture(accel_state *state, int *gesture_id, int *distance)`\r\n    - Returns the id of the gesture that is most likely to have occurred.\r\n\r\n## Using accel in Your Project\r\n\r\n### Getting the accel Source Code\r\nGetting the accel source is easy. Simply clone the github repository as follows:\r\n```\r\ngit clone https://github.com/shalecraig/accel.git\r\n```\r\n\r\n### Using accel in Pebble Projects\r\n\r\nSimply copy all files from the `accel/src` directory in accel into the `accel/src` directory in your pebble app. The `pebble build` command will find the newly added files, so everything should work smoothly.\r\n\r\n```\r\ncp accel/src/* myproject/src/\r\n```\r\n\r\nA sample of library usage is in the `accel/samples` directory.\r\n\r\n### Using accel in Other Projects\r\n\r\nThe source code is in the `accel/src` directory. Simply include `accel.h` and make sure you compile all files. If you needed to make changes, feel free to submit pull requests to [the accel repo](https://github.com/shalecraig/accel).\r\n\r\n## Running tests\r\n\r\nAfter going to the test directory (`cd test/`), running `make run` should execute tests successfully.\r\n\r\nTODO: As of right now, C tests are compiled by the C++ compiler. We should fix this.\r\n\r\n## Current Version\r\n\r\nThe accel version is currently 1.0.0b.\r\nThis version is defined in `accel.h` as `ACCEL_VERSION_CODE` , which is generated using the `ACCEL_VERSION_GEN` macro.\r\n\r\nAttribution\r\n=====\r\n\r\nGesture recognition adapted from:\r\n- Jiayang Liu, Zhen Wang, Lin Zhong, Jehan Wickramasuriya, and Venu Vasudevan, \"uWave: Accelerometer-based personalized gesture recognition and its applications,\" in Proc. IEEE Int. Conf. Pervasive Computing and Communication (PerCom), March 2009.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}